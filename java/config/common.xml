<!--
 **********************************************************************

 Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.

 This copy of Ice is licensed to you under the terms described in the
 ICE_LICENSE file included in this distribution.

 **********************************************************************
-->

<project name="common" basedir="." xmlns:fx="javafx:com.sun.javafx.tools.ant">

    <property environment="env"/>
    <property name="build.sysclasspath" value="last"/>

    <target name="init" depends="config-init, task-init">
      <!-- Create the time stamp -->
      <tstamp/>
    </target>

    <!-- Load build configuration properties -->
    <property file="${top.dir}/config/build.properties"/>

    <condition property="thirdparty.home" value="${env.THIRDPARTY_HOME}">
       <and>
          <os family="Windows"/>
          <isset property="env.THIRDPARTY_HOME"/>
          <not><isset property="thirdparty.home"/></not>
       </and>
    </condition>

    <condition property="thirdparty.home" value="${env.ProgramFiles(x86)}\ZeroC\Ice-${ice.version}-ThirdParty">
        <and>
            <os family="Windows"/>
            <not><isset property="thirdparty.home"/></not>
            <or>
                <equals arg1="AMD64" arg2="${env.PROCESSOR_ARCHITECTURE}"/>
                <equals arg1="AMD64" arg2="${env.PROCESSOR_ARCHITEW6432}"/>
            </or>
        </and>
    </condition>

    <condition property="thirdparty.home" value="${env.ProgramFiles}\ZeroC\Ice-${ice.version}-ThirdParty">
        <and>
            <os family="Windows"/>
            <not><isset property="thirdparty.home"/></not>
        </and>
    </condition>


    <!-- Set default prefix directory, just if prefix is not set -->
    <condition property="prefix" value="${env.SystemDrive}\Ice-${ice.version}">
        <and>
            <os family="windows"/>
            <not><isset property="prefix"/></not>
        </and>
    </condition>

    <condition property="prefix" value="/opt/Ice-${ice.version}">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="prefix"/></not>
        </and>
    </condition>

    <!-- Use -Xlint when requested -->
    <condition property="javac.lint" value="-Xlint:${lint}" else="-Xlint:none">
        <isset property="lint"/>
    </condition>

    <!-- Default build suffix is empty. This can be defined by build
         scripts to build the jars and classes file in other
         directories than the default one. This is useful to build
         both the Java2 and Java5 mapping with the same source tree.
      -->
    <property name="build.suffix" value=""/>

    <!-- Commonly needed properties -->
    <property name="class.dir" value="classes${build.suffix}"/>
    <property name="generated.dir" value="generated${build.suffix}"/>

    <!-- Do we build the IceGrid Admin graphical tool -->
    <!-- Currently we build it when the JDK is version 7 and we are not 
         on Solaris (which does not have JavaFX) -->
    <condition property="build-icegridadmin">
      <and>
         <equals arg1="${java.specification.version}" arg2="1.7"/>
         <not><os name="SunOS"/></not>
      </and>
    </condition>

    <!-- We use pathconvert to ensure that ice.top.dir is relative to the path of the build.xml
         file insead of the current working directory. -->
    <pathconvert property="ice.top.dir">
      <path location="${top.dir}"/>
    </pathconvert>

    <!-- Define text.extension to '.txt' in Windows source distributions -->
    <condition property="text.extension" value=".txt" else="">
        <and>
          <os family="Windows"/>
          <available file="${top.dir}/../LICENSE.txt"/>
          <not><isset property="text.extension"/></not>
       </and>
    </condition>

    <condition property="slice.translator" value="slice2java.exe" else="slice2java">
      <os family="windows"/>
    </condition>

    <fail message="Unable to find ${slice.translator} in ${ice.home}, please verify ice.home is properly configured and Ice is correctly installed.">
        <condition>
            <and>
                <isset property="ice.home"/>
                <not><available file="${ice.home}/bin/${slice.translator}"/></not>
            </and>
        </condition>
    </fail>
    <fail message="Unable to find ${slice.translator} in ${env.ICE_HOME}, please verify ICE_HOME is properly configured and Ice is correctly installed.">
        <condition>
            <and>
                <not><isset property="ice.home"/></not>
                <isset property="env.ICE_HOME"/>
                <not><available file="${env.ICE_HOME}/bin/${slice.translator}"/></not>
            </and>
        </condition>
    </fail>

    <condition property="ice.bin.dist">
        <or>
           <equals arg1="${use.bin.dist}" arg2="yes"/>
           <equals arg1="${env.USE_BIN_DIST}" arg2="yes"/>
        </or>
    </condition>

    <!-- First, check if we're building a source distribution. -->

    <condition property="ice.dir" value="${ice.top.dir}/..">
        <and>
            <!-- Don't just look for ${ice.top.dir}/../java - we want to make sure we are really
                 in a source distribution. -->
            <available file="${ice.top.dir}/../java/src/Ice/Util.java"/>
            <not><isset property="ice.bin.dist"/></not>
        </and>
    </condition>
    <condition property="ice.dir" value="${ice.top.dir}/ice">
        <and>
            <!-- Don't just look for ${ice.top.dir}/ice/java - we want to make sure we are really
                 in a source distribution. -->
            <not><isset property="ice.dir"/></not>
            <available file="${ice.top.dir}/ice/java/src/Ice/Util.java"/>
            <not><isset property="ice.bin.dist"/></not>
        </and>
    </condition>
    <!-- When building a source distribution, we allow using either the
         translators from a binary distribution or the local translators, -->
    <condition property="ice.cpp.dir" value="${ice.home}">
        <and>
            <isset property="ice.dir"/>
            <not><isset property="ice.cpp.dir"/></not>
            <available file="${ice.home}/bin/${slice.translator}"/>
        </and>
    </condition>
    <condition property="ice.cpp.dir" value="${env.ICE_HOME}" else="${ice.dir}/cpp">
        <and>
            <isset property="ice.dir"/>
            <not><isset property="ice.cpp.dir"/></not>
            <available file="${env.ICE_HOME}/bin/${slice.translator}"/>
        </and>
    </condition>
    <condition property="ice.warn.duplicate.translator">
        <and>
             <isset property="ice.cpp.dir"/>
             <not><equals arg1="${ice.cpp.dir}" arg2="${ice.dir}/cpp"/></not>
             <available file="${ice.dir}/cpp/bin/${slice.translator}"/>
        </and>
    </condition>
    <condition property="ice.src.dist">
        <and>
            <isset property="ice.dir"/>
        </and>
    </condition>

    <!-- Then, check if we're building against a binary distribution. -->

    <condition property="ice.dir" value="${ice.home}">
        <and>
          <not><isset property="ice.dir"/></not>
          <isset property="ice.home"/>
        </and>
    </condition>
    <condition property="ice.dir" value="${env.ICE_HOME}">
        <and>
          <not><isset property="ice.dir"/></not>
          <isset property="env.ICE_HOME"/>
        </and>
    </condition>
    <condition property="ice.dir" value="${ice.top.dir}">
        <and>
          <not><isset property="ice.dir"/></not>
          <available file="${ice.top.dir}/bin/${slice.translator}"/>
        </and>
    </condition>
    <condition property="ice.dir" value="/usr">
        <and>
          <not><isset property="ice.dir"/></not>
          <available file="/usr/bin/${slice.translator}"/>
        </and>
    </condition>

    <condition property="ice.dir" value="${env.ProgramFiles(x86)}\ZeroC\Ice-${ice.version}">
        <and>
            <os family="Windows"/>
            <not><isset property="ice.dir"/></not>
            <or>
                <and>
                    <or>
                        <equals arg1="AMD64" arg2="${env.PROCESSOR_ARCHITECTURE}"/>
                        <equals arg1="IA64" arg2="${env.PROCESSOR_ARCHITECTURE}"/>
                    </or>
                </and>
                <and>
                    <or>
                        <equals arg1="AMD64" arg2="${env.PROCESSOR_ARCHITEW6432}"/>
                        <equals arg1="IA64" arg2="${env.PROCESSOR_ARCHITEW6432}"/>
                    </or>
                </and>
            </or>
        </and>
    </condition>

    <condition property="ice.dir" value="${env.ProgramFiles}\ZeroC\Ice-${ice.version}">
        <and>
            <os family="windows"/>
            <not><isset property="ice.dir"/></not>
        </and>
    </condition>
    <condition property="ice.dir" value="/opt/Ice-${ice.version}">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="ice.dir"/></not>
            <available file="/opt/Ice-${ice.version}/bin/${slice.translator}"/>
        </and>
    </condition>
    <condition property="ice.bin.dist">
        <and>
            <not><isset property="ice.src.dist"/></not>
            <isset property="ice.dir"/>
        </and>
    </condition>
    <fail message="Unable to find a valid Ice distribution, please verify ICE_HOME is properly configured and Ice is correctly installed.">
        <condition>
            <not><or>
              <isset property="ice.src.dist"/>
              <isset property="ice.bin.dist"/>
            </or></not>
        </condition>
    </fail>

    <!-- Set ice.home for the ant Slice tasks or ensure it's properly set by the user. -->
    <condition property="ice.home" value="${ice.dir}">
        <isset property="ice.bin.dist"/>
    </condition>
    <condition property="ice.home" value="${ice.cpp.dir}">
        <isset property="ice.src.dist"/>
    </condition>

    <!-- Set db.jar.file to the path name of the Berkeley DB JAR file, but only if it's
         not already present in the class path. -->
    <condition property="db.jar.file" value="/usr/share/java/db-${db.version}.jar">
        <and>
            <not><available classname="com.sleepycat.db.Database"/></not>
            <available file="/usr/share/java/db-${db.version}.jar"/>
        </and>
    </condition>
    <condition property="db.jar.file" value="/opt/Ice-${ice.version}/lib/db.jar">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="db.jar.file"/></not>
            <not><available classname="com.sleepycat.db.Database"/></not>
            <available file="/opt/Ice-${ice.version}/lib/db.jar"/>
        </and>
    </condition>
    <condition property="db.jar.file" value="/opt/db-${db.version}/lib/db.jar">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="db.jar.file"/></not>
            <not><available classname="com.sleepycat.db.Database"/></not>
            <available file="/opt/db-${db.version}/lib/db.jar"/>
        </and>
    </condition>
    <condition property="db.jar.file" value="/opt/db/lib/db.jar">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="db.jar.file"/></not>
            <not><available classname="com.sleepycat.db.Database"/></not>
            <available file="/opt/db/lib/db.jar"/>
        </and>
    </condition>
    <condition property="db.jar.file" value="/usr/lib/db.jar">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="db.jar.file"/></not>
            <not><available classname="com.sleepycat.db.Database"/></not>
            <available file="/usr/lib/db.jar"/>
        </and>
    </condition>


    <condition property="db.jar.file" value="${thirdparty.home}/lib/db.jar">
        <and>
            <os family="windows"/>
            <not><isset property="db.jar.file"/></not>
            <not><available classname="com.sleepycat.db.Database"/></not>
            <available file="${thirdparty.home}/lib/db.jar"/>
        </and>
    </condition>


    <path id="db.classpath">
        <pathelement location="${db.jar.file}"/>
    </path>

    <!-- Set jgoodies.common to the path name of the Jgoodies Common JAR file -->
    <condition property="jgoodies.common" value="/usr/share/java/jgoodies-common-${jgoodies-common.version}.jar">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="jgoodies.common"/></not>
            <not><available classname="com.jgoodies.common.base.SystemUtils"/></not>
            <available file="/usr/share/java/jgoodies-common-${jgoodies-common.version}.jar"/>
        </and>
    </condition>
    <condition property="jgoodies.common"
               value="${thirdparty.home}/lib/jgoodies-common-${jgoodies-common.version}.jar">
        <and>
            <os family="windows"/>
            <not><isset property="jgoodies.common"/></not>
            <not><available classname="com.jgoodies.common.base.SystemUtils"/></not>
            <available file="${thirdparty.home}/lib/jgoodies-common-${jgoodies-common.version}.jar"/>
        </and>
    </condition>

    <!-- Set jgoodies.forms to the path name of the Jgoodies Forms JAR file -->
    <condition property="jgoodies.forms" value="/usr/share/java/jgoodies-forms-${jgoodies-forms.version}.jar">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="jgoodies.forms"/></not>
            <not><available classname="com.jgoodies.forms.builder.DefaultFormBuilder"/></not>
            <available file="/usr/share/java/jgoodies-forms-${jgoodies-forms.version}.jar"/>
        </and>
    </condition>
    <condition property="jgoodies.forms"
               value="${thirdparty.home}/lib/jgoodies-forms-${jgoodies-forms.version}.jar">
        <and>
            <os family="windows"/>
            <not><isset property="jgoodies.forms"/></not>
            <not><available classname="com.jgoodies.forms.builder.DefaultFormBuilder"/></not>
            <available file="${thirdparty.home}/lib/jgoodies-forms-${jgoodies-forms.version}.jar"/>
        </and>
    </condition>

    <!-- Set jgoodies.looks to the path name of the Jgoodies Looks JAR file -->
    <condition property="jgoodies.looks" value="/usr/share/java/jgoodies-looks-${jgoodies-looks.version}.jar">
        <and>
            <not><os family="windows"/></not>
            <not><isset property="jgoodies.looks"/></not>
            <not><available classname="com.jgoodies.looks.Options"/></not>
            <available file="/usr/share/java/jgoodies-looks-${jgoodies-looks.version}.jar"/>
        </and>
    </condition>
    <condition property="jgoodies.looks"
               value="${thirdparty.home}/lib/jgoodies-looks-${jgoodies-looks.version}.jar">
        <and>
            <os family="windows"/>
            <not><isset property="jgoodies.looks"/></not>
            <not><available classname="com.jgoodies.looks.Options"/></not>
            <available file="${thirdparty.home}/lib/jgoodies-looks-${jgoodies-looks.version}.jar"/>
        </and>
    </condition>

    <target name="config-init-warn" if="ice.warn.duplicate.translator">
        <echo message="Found ${slice.translator} in both ${ice.cpp.dir}/bin and ${ice.dir}/cpp/bin, ${ice.cpp.dir}/bin/${slice.translator} will be used!" level="warning"/>
    </target>

    <target name="config-init-javafx" if="build-icegridadmin">

        <!-- JavaFX jar file -->
        <condition property="javafx.jar" value="${java.home}/lib/jfxrt.jar">
            <and>
                <not><isset property="javafx.jar"/></not>
                <available file="${java.home}/lib/jfxrt.jar"/>
            </and>
        </condition>

        <condition property="ant-javafx.jar" value="${java.home}/../lib/ant-javafx.jar">
            <and>
                <not><isset property="ant-javafx.jar"/></not>
                <available file="${java.home}/../lib/ant-javafx.jar"/>
            </and>
        </condition>

        <taskdef resource="com/sun/javafx/tools/ant/antlib.xml" uri="javafx:com.sun.javafx.tools.ant"
                 classpath="${ant-javafx.jar}"/>
    </target>

    <target name="config-init" depends="config-init-warn">

        <!-- Set slice.dir to the directory containing the Slice files. -->
        <condition property="slice.dir" value="/usr/share/Ice-${ice.version}/slice" else="${ice.dir}/slice">
            <equals arg1="${ice.dir}" arg2="/usr"/>
        </condition>

        <!-- Set ice.classpath with the distribution Ice.jar file -->
        <condition property="dist.lib.dir" value="${ice.dir}/java/lib${build.suffix}">
            <isset property="ice.src.dist"/>
        </condition>
        <condition property="dist.lib.dir" value="${ice.dir}/lib">
            <and>
                <isset property="ice.bin.dist"/>
                <not><equals arg1="${ice.dir}" arg2="/usr"/></not>
            </and>
        </condition>
        <condition property="dist.lib.dir" value="/usr/share/java">
            <and>
                <isset property="ice.bin.dist"/>
                <equals arg1="${ice.dir}" arg2="/usr"/>
            </and>
        </condition>

        <!-- Ice jar file -->
        <condition property="ice.jar.file" value="${dist.lib.dir}/Ice-${ice.version}.jar">
            <and>
                <not><isset property="ice.jar.file"/></not>
                <available file="${dist.lib.dir}/Ice-${ice.version}.jar"/>
            </and>
        </condition>

        <condition property="ice.jar.file" value="${dist.lib.dir}/Ice.jar">
            <and>
                <not><isset property="ice.jar.file"/></not>
                <available file="${dist.lib.dir}/Ice.jar"/>
            </and>
        </condition>

        <path id="ice.classpath">
            <pathelement location="${ice.jar.file}"/>
        </path>

        <!-- Glacier2 jar file -->
        <condition property="glacier2.jar.file" value="${dist.lib.dir}/Glacier2-${ice.version}.jar">
            <and>
                <not><isset property="glacier2.jar.file"/></not>
                <available file="${dist.lib.dir}/Glacier2-${ice.version}.jar"/>
            </and>
        </condition>

        <condition property="glacier2.jar.file" value="${dist.lib.dir}/Glacier2.jar">
            <and>
                <not><isset property="glacier2.jar.file"/></not>
                <available file="${dist.lib.dir}/Glacier2.jar"/>
            </and>
        </condition>

        <path id="glacier2.classpath">
            <pathelement location="${glacier2.jar.file}"/>
        </path>

        <!-- Set freeze.classpath with the distribution Freeze.jar file -->
        <condition property="freeze.jar.file" value="${dist.lib.dir}/Freeze-${ice.version}.jar">
            <and>
                <not><isset property="freeze.jar.file"/></not>
                <available file="${dist.lib.dir}/Freeze-${ice.version}.jar"/>
            </and>
        </condition>

        <condition property="freeze.jar.file" value="${dist.lib.dir}/Freeze.jar">
            <and>
                <not><isset property="freeze.jar.file"/></not>
                <available file="${dist.lib.dir}/Freeze.jar"/>
            </and>
        </condition>

        <path id="freeze.classpath">
            <pathelement location="${freeze.jar.file}"/>
            <path refid="db.classpath"/>
        </path>


        <!-- IceBox jar file -->
        <condition property="icebox.jar.file" value="${dist.lib.dir}/IceBox-${ice.version}.jar">
            <and>
                <not><isset property="icebox.jar.file"/></not>
                <available file="${dist.lib.dir}/IceBox-${ice.version}.jar"/>
            </and>
        </condition>

        <condition property="icebox.jar.file" value="${dist.lib.dir}/IceBox.jar">
            <and>
                <not><isset property="icebox.jar.file"/></not>
                <available file="${dist.lib.dir}/IceBox.jar"/>
            </and>
        </condition>

        <path id="icebox.classpath">
            <pathelement location="${icebox.jar.file}"/>
        </path>

        <!-- IceStorm jar file -->
        <condition property="icestorm.jar.file" value="${dist.lib.dir}/IceStorm-${ice.version}.jar">
            <and>
                <not><isset property="icestorm.jar.file"/></not>
                <available file="${dist.lib.dir}/IceStorm-${ice.version}.jar"/>
            </and>
        </condition>

        <condition property="icestorm.jar.file" value="${dist.lib.dir}/IceStorm.jar">
            <and>
                <not><isset property="icestorm.jar.file"/></not>
                <available file="${dist.lib.dir}/IceStorm.jar"/>
            </and>
        </condition>

        <path id="icestorm.classpath">
            <pathelement location="${icestorm.jar.file}"/>
        </path>

        <!-- IceGrid jar file -->
        <condition property="icegrid.jar.file" value="${dist.lib.dir}/IceGrid-${ice.version}.jar">
            <and>
                <not><isset property="icegrid.jar.file"/></not>
                <available file="${dist.lib.dir}/IceGrid-${ice.version}.jar"/>
            </and>
        </condition>

        <condition property="icegrid.jar.file" value="${dist.lib.dir}/IceGrid.jar">
            <and>
                <not><isset property="icegrid.jar.file"/></not>
                <available file="${dist.lib.dir}/IceGrid.jar"/>
            </and>
        </condition>

        <path id="icegrid.classpath">
            <pathelement location="${icegrid.jar.file}"/>
        </path>

        <condition property="certs.dir" value="${ice.top.dir}/certs" else="${ice.top.dir}/../certs">
            <available file="${ice.top.dir}/certs/client.jks"/>
        </condition>
    </target>

    <!-- Install the Slice ant tasks. -->
    <target name="task-init">

        <condition property="task.jar.file" value="${dist.lib.dir}/ant-ice-${ice.version}.jar">
            <available file="${dist.lib.dir}/ant-ice-${ice.version}.jar"/>
        </condition>

        <condition property="task.jar.file" value="${dist.lib.dir}/ant-ice.jar">
            <and>
                <not><isset property="task.jar.file"/></not>
                <available file="${dist.lib.dir}/ant-ice.jar"/>
            </and>
        </condition>

        <taskdef name="slice2java" classpath="${task.jar.file}" classname="Slice2JavaTask"/>
        <taskdef name="slice2freezej" classpath="${task.jar.file}" classname="Slice2FreezeJTask" />

    </target>

</project>
