// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

#include <DeptFactoryI.h>
#include <Util.h>
#include <sqlca.h>

EXEC SQL WHENEVER SQLERROR DO handleSqlError(sqlca, ctx);

using namespace std;

DeptFactoryI::DeptFactoryI(const CurrentSqlContext& currentCtx, const string& deptCategory, const string& empCategory) :
    _currentCtx(currentCtx),
    _deptCategory(deptCategory),
    _empCategory(empCategory)
{
}

HR::DeptPrx 
DeptFactoryI::createDept(int key, const HR::DeptDesc& desc, const Ice::Current& current)
{
    sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
    sql_context ctx = _currentCtx;
    int deptno = key;
    const char* dname = desc.dname.c_str();
    const char* loc = desc.loc.c_str();
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL CONTEXT USE :ctx;
    EXEC SQL INSERT INTO DEPT(deptno, dname, loc) VALUES(:deptno, :dname, :loc); 
    EXEC SQL COMMIT;

    Ice::Identity deptId;
    deptId.name = encodeName(deptno);
    deptId.category = _deptCategory;
    return HR::DeptPrx::uncheckedCast(current.adapter->createProxy(deptId));
}

EXEC SQL WHENEVER NOT FOUND DO break;

HR::DeptPrxSeq 
DeptFactoryI::findAll(const Ice::Current& current)
{
    sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
    sql_context ctx = _currentCtx;
    int deptno;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL CONTEXT USE :ctx;
    EXEC SQL DECLARE depCursor1 CURSOR FOR SELECT DEPTNO FROM DEPT;
    EXEC SQL OPEN depCursor1;
       
    HR::DeptPrxSeq result;

    for(;;)
    {
        EXEC SQL FETCH depCursor1 INTO :deptno;

        Ice::Identity deptId;
        deptId.category = _deptCategory;
        deptId.name = encodeName(deptno);

        result.push_back(HR::DeptPrx::uncheckedCast(current.adapter->createProxy(deptId)));
    }

    EXEC SQL CLOSE depCursor1;
    EXEC SQL COMMIT;
    return result;
}

HR::DeptPrxSeq 
DeptFactoryI::findByName(const string& name, const Ice::Current& current)
{
    sqlca sqlca;
    EXEC SQL BEGIN DECLARE SECTION;
    const char* dname = name.c_str();
    sql_context ctx = _currentCtx;
    int deptno;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL CONTEXT USE :ctx;
    EXEC SQL DECLARE depCursor2 CURSOR FOR SELECT DEPTNO FROM DEPT WHERE DNAME = :dname;
    EXEC SQL OPEN depCursor2;
      
    HR::DeptPrxSeq result;

    for(;;)
    {
        EXEC SQL FETCH depCursor2 INTO :deptno;

        Ice::Identity deptId;
        deptId.category = _deptCategory;
        deptId.name = encodeName(deptno);

        result.push_back(HR::DeptPrx::uncheckedCast(current.adapter->createProxy(deptId)));
    }

    EXEC SQL CLOSE depCursor2;
    EXEC SQL COMMIT;
    return result;
}

HR::DeptPrx
DeptFactoryI::findDeptByNo(int deptno, const Ice::Current& current)
{
    Ice::Identity deptId;
    deptId.category = _deptCategory;
    deptId.name = encodeName(deptno);
    Ice::ObjectPrx prx = current.adapter->createProxy(deptId);
 
    //
    // Check that this deptno exists
    //
    try
    {
        prx->ice_ping();
    }
    catch(const Ice::ObjectNotExistException&)
    {
        return 0;
    }
    
    return HR::DeptPrx::uncheckedCast(prx);
}

HR::EmpPrx
DeptFactoryI::findEmpByNo(int empno, const Ice::Current& current)
{
    Ice::Identity empId;
    empId.category = _empCategory;
    empId.name = encodeName(empno);
    Ice::ObjectPrx prx = current.adapter->createProxy(empId);

    //
    // Check that this empno exists
    //
    try
    {
        prx->ice_ping();
    }
    catch(const Ice::ObjectNotExistException&)
    {
        return 0;
    }
    
    return HR::EmpPrx::uncheckedCast(prx);
}
