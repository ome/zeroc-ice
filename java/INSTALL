This file describes how to build and install Ice for Java from source
code.

If you prefer, you can download binary distributions for supported
platforms at the link below:

  http://www.zeroc.com/download.html


======================================================================
Requirements
======================================================================


Operating systems
-----------------

Ice for Java has been tested under Linux, Solaris, OS X, and Windows
7/8/Server 2008/Server 2012, but due to the portability of Java, it is
very likely that it will also work on other platforms for which a 
suitable Java implementation is available.

Note, however, that you will need the Slice to Java translator (see
below). ZeroC provides translator binaries for supported platforms.
For other platforms, you will have to either port Ice for C++ (which
contains the Slice to Java translator), or you will have to translate
your Slice files to Java on a supported platform, and copy the
generated Java files to your target platform.


Java version
------------

Ice for Java requires J2SE 1.6.0 or later.

The graphical IceGrid administrative tool requires J2SE 7u6 or later
with JavaFX support.

You can download Java for Solaris, Windows, OS X and Linux from:

  http://www.oracle.com/technetwork/java/index.html

We do not support the IceGrid administrative tool on Solaris because
of the lack of JavaFX support on this platform.

Make sure to add javac and java to your PATH.

When using the Ice for Java SSL plug-in (IceSSL), you may experience
occasional hangs. The most likely reason is that your system's entropy
pool is empty. If you have sufficient system privileges, you can solve
this issue by editing the following file

  <java.home>/jre/lib/security/java.security

and changing it to use /dev/urandom instead of /dev/random. If you do
not have permission to modify the security file, you can also use the
command-line option shown below:

  java -Djava.security.egd=file:/dev/urandom MyClass ...

On systems with IPv6 enabled, you may experience occasional hangs
the first time an Ice object adapter is activated within a JVM. A
work-around is to disable IPv6 support by setting the Java property
java.net.preferIPv4Stack to true. For example:

  java -Djava.net.preferIPv4Stack=true MyClass ...

For more information on this issue, refer to Sun's bug database:

  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6483406


Slice to Java translator
------------------------

You will need the Slice to Java translator and supporting executables
and libraries. You can download a binary distribution from the ZeroC
web site, or you can build Ice for C++ yourself.

Binary distributions for supported platforms are available at

  http://www.zeroc.com/download.html


Berkeley DB
-----------

"Freeze" is an optional Ice component that provides a persistence
facility for Ice applications. Freeze uses Berkeley DB as its
underlying database and currently requires Berkeley DB version 5.3
(the recommended version is 5.3.21).

ZeroC includes a Berkeley DB binary distribution with Java support
in the Ice distribution on all platforms except Solaris 11:

  http://www.zeroc.com/download.html

The corresponding source distribution with build instructions is
available at:

  http://www.zeroc.com/download.html#src_third_party

In order to run an application that uses Freeze, you must add db.jar
to your CLASSPATH and verify that the Berkeley DB shared libraries are
in your java.library.path. On Linux, this can be achieved by adding
<Berkeley DB home>/lib to your LD_LIBRARY_PATH, for example:

  $ export LD_LIBRARY_PATH=/opt/db53/lib:$LD_LIBRARY_PATH


bzip2
-----

Ice for Java supports protocol compression using the bzip2 classes
included with Apache Ant (see "Compiling the Source" below).

Compression is automatically enabled if the classes are present in the
CLASSPATH. You can either add ant.jar to your CLASSPATH, or download
only the bzip2 classes from

  http://www.kohsuke.org/bzip2/

Note that these classes are a pure Java implementation of the bzip2
algorithm and therefore add significant latency to Ice requests.


JGoodies
--------

The graphical IceGrid administrative tool (see "IceGrid Administrative
Console") uses JGoodies Common, JGoodies Forms, and JGoodies Looks.

The libraries are available here:

  http://www.jgoodies.com/downloads/libraries/

The IceGrid administrative tool has been tested with the following
versions:

  JGoodies Common 1.4.0
  JGoodies Forms 1.6.0
  JGoodies Looks 2.5.2


ProGuard
--------

ProGuard is used to create the standalone JAR file for the graphical
IceGrid administrative tool (see "IceGrid Administrative Console").

ProGuard is available here:

  http://proguard.sourceforge.net

Ice for Java has been tested with ProGuard 4.8.


Java Application Bundler
------------------------

The Java Application Bundler is used to create the OS X application
bundle for the graphical IceGrid administrative tool (see "IceGrid
Administrative Console").

The Java Application Bundler is available here:

  http://java.net/projects/appbundler


Android
-------

The Ice run time (lib/Ice.jar) is fully compatible with Android 2.3 or
later.

Refer to the sections "Eclipse Development" and "Using Ice in Android"
below for additional details.


======================================================================
Compiling the Source
======================================================================


Preparing to Build
------------------

The Ice for Java build system requires Apache Ant 1.7.0 or later. Ant
is available at the link below:

  http://ant.apache.org/

This source distribution cannot be compiled successfully without the
Berkeley DB run time for Java (db.jar). On Unix platforms, the build
system searches for this file in two locations:

  * /usr/share/java/db-5.3.21.jar
  * /opt/Ice-3.5.0/lib/db.jar

If neither of these files is present on your system, or if you are not
using a Unix platform, you must add db.jar to your CLASSPATH.

The build system also requires the Slice translators from Ice for C++.
If you have not built Ice for C++ in this source distribution, you
must set the ICE_HOME environment variable with the path name of your
Ice installation. For example:

  # On Unix.
  $ export ICE_HOME=/opt/Ice-3.5.0  (For local build)
  $ export ICE_HOME=/usr            (For RPM installation)

  # On Windows
  > set ICE_HOME=C:\Ice-3.5.0

Before building Ice for Java, review the settings in the file
config/build.properties and edit as necessary.

If you intend to build the IceGrid Administrative Console, you have
two options:

1. Build it as a standalone JAR file. In this case, confirm the
   locations of the JGoodies libraries in config/build.properties and
   add ProGuard to your CLASSPATH.

2. Build it as a regular JAR file. The JGoodies libraries must either
   be present in your CLASSPATH or available at the locations defined
   in config/build.properties.

In OS X you have one more option to create an Application Bundle. The
Java Application Bundler must be present in your CLASSPATH. After build
the application bundle will be placed in "lib/IceGrid Admin.app". During
installation the bundle is copied to the Ice-3.5.0/bin subdirectory.


Building Ice for Java
---------------------

To build only the Ice run time (Ice.jar), use the following command:

  ant ice-jar

To build the Ice run time along with Freeze, IceBox, IceGrid, IceStorm,
IcePatch2 services  and the IceGrid administrative console, use
this command:

  ant jar

Finally, to build the entire source distribution, including tests
and sample programs, use this command:

  ant

Upon completion, the JAR files can be found in the "lib" subdirectory.

If at any time you wish to discard the current build and start a new
one, use these commands:

  ant clean
  ant


Ant Tasks
---------

The build system uses some Ice-specific Ant tasks for executing the
Slice translators that you may find useful in your own Ant projects.
The Java classes for the tasks are supplied in lib/ant-ice.jar. You
can use an Ant project file from any of the sample programs as a
guide for using the tasks, or you can review the source code in
the src/ant subdirectory.


======================================================================
Installation
======================================================================

Simply run "ant install". This will install Ice in the directory
specified by the "prefix" variable in config/build.properties.
It is not necessary to rebuild Ice for Java after changing the
value of the prefix variable.

After installation, add Ice.jar to your CLASSPATH. If you plan to use
other Ice services, you must also add the appropriate JAR files to
your CLASSPATH: Freeze.jar, Glacier2.jar, IceBox.jar, IceStorm.jar,
IcePatch2.jar and IceGrid.jar.


======================================================================
Eclipse Development
======================================================================

ZeroC has created a Slice2Java plug-in for Eclipse that automates the
translation of your Slice files. If you use Eclipse, we strongly
recommend using this plug-in for your own development.

Note that the Slice2Java plug-in is required if you intend to build
any of the Android sample projects included in this distribution.

For more information on installing the plug-in, please refer to the
link below:

  http://www.zeroc.com/eclipse.html

The Ice manual provides usage instructions for the plug-in:

  http://doc.zeroc.com/display/Ice/Eclipse+Plug-in


======================================================================
Using Ice in Android
======================================================================

Ice requires Android 2.3 or later. Aside from that, there are no other
special requirements for using Ice in an Android application. We
strongly recommend installing our Slice2Java plug-in for Eclipse to
automate the compilation of your Slice definitions.


Sample Projects
---------------

Several sample Android projects are provided in the demo/android
subdirectory. You must use Eclipse and the Slice2Java plug-in to build
these projects.

In Eclipse, you can open a sample project by choosing File->Import...;
in the "General" group, select "Existing Project into Workspace", then
open one of the subdirectories of demo/android.

The sample projects are configured to locate the Ice run time JAR file
(Ice.jar) via the ICE_HOME classpath variable, as described in the Ice
manual:

  http://doc.zeroc.com/display/Ice/Eclipse+Plug-in

If you installed Ice.jar in a different location, you will need to add
it as an external JAR file in each sample project:

 1. Open the project's properties and select Java Build Path
 2. Click on the Libraries tab
 3. Click Add External JARs... and navigate to Ice.jar
 4. Click OK to save your settings


======================================================================
Tests and Demos
======================================================================

Some of the Ice for Java tests employ applications that are part of
the Ice for C++ distribution. If you have not built Ice for C++ in
this source distribution then you must set the ICE_HOME environment
variable with the path name of your Ice installation:

  # On Unix
  $ export ICE_HOME=/opt/Ice-3.5.0  (For local build)
  $ export ICE_HOME=/usr            (For RPM installation)

  # On Windows
  > set ICE_HOME=c:\Ice-3.5.0

Python is required to run the test suite:

  http://www.python.org/download

To run the tests, open a command window and change to the top-level
directory. At the command prompt, execute:

  python allTests.py

You can also run tests individually by changing to the test directory
and running this command:

  python run.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".

Note that the Glacier2/router test will fail if it is run with the
--compress option but the bzip2 classes are not present in your
CLASSPATH.

If you want to try out any of the demos, make sure to add lib/Ice.jar
and "classes" to your CLASSPATH.

For demos that use Ice services you must also add the service
corresponding jar files Freeze.jar, Glacier2.jar, IceBox.jar,
IceStorm.jar and IceGrid.jar to your CLASSPATH.

Then change to the desired demo directory and follow the instructions
in the README file. If no README file is present, the demo can be run
by entering the following command to start the server:

  $ java Server

Then in a separate window enter the following command to start the
client:

  $ java Client


======================================================================
Android Tests
======================================================================

The Ice test suite for Android consists of a JAR file containing the
individual test cases and an Android app that loads and runs these
tests.

You must first build the test JAR file:

  $ ant test-android-jar

This produces IceAndroidTest.jar. Next, you must use Eclipse and the
Slice2Java plug-in to build the the test app.

In Eclipse, open the test project by choosing File->Import...; in the
"General" group, select "Existing Project into Workspace", then
navigate to the test/android directory.

The test project is configured to locate the Ice run time JAR file
(Ice.jar) and IceAndroidTest.jar via the ICE_JAR_HOME classpath
variable. The Slice2Java plug-in configures this variable
automatically based on your setting for the SDK location in the
Eclipse preferences.

After successfully building the project, deploy it onto a suitable
emulator or device.


======================================================================
IceGrid Administrative Console
======================================================================

Ice for Java includes a graphical administrative console for IceGrid.
If you elected to build the console, it can be found in the file

  lib/IceGridGUI.jar

If you built this JAR file using ProGuard, it is completely self-
contained and has no external dependencies, in which case you can
start the console with the following command:

  java -jar IceGridGUI.jar

If you compiled the console without ProGuard, you will need to add
IceGridGUI.jar to your CLASSPATH. You can start the console with this
command:

  java IceGridGUI.Main

In OS X there is also an application bundle named "IceGrid Admin". You
can start the IceGrid Administrative Console by double-clicking the
"IceGrid Admin" icon in Finder.
